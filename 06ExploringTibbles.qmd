# Exploring Dataframes (Part 2 of 2)

**Chapter 6*.***

## **tibbles**

A `tibble` is essentially an updated version of the conventional data frame, providing more flexible and effective data management features.

`Tibbles`, are a component of the `tidyverse` suite, a collection of R packages geared towards making data science more straightforward. They share many properties with dataframes but also offer unique benefits that enhance our ability to work with data.

1.  **Printing:** When a `tibble` is printed, only the initial ten rows and the number of columns that fit within our screen's width are displayed. This feature becomes particularly useful when dealing with extensive datasets having multiple columns, enhancing the data's readability.

2.  **Subsetting:** Unlike conventional data frames, subsetting a `tibble` always maintains its original structure. Consequently, even when we pull out a single column, it remains as a one-column `tibble`, ensuring a consistent output type.

3.  **Data types:** `tibbles` offer a transparent approach towards data types. They avoid hidden conversions, ensuring that the output aligns with our expectations.

4.  **Non-syntactic names:** `tibbles` support columns having non-syntactic names (those not following R's standard naming rules), which is not always the case with standard data frames.

We consider `tibbles` to be a vital part of our data manipulation arsenal, especially when working within the `tidyverse` ecosystem \[1\].

## The **`dplyr`** package

The `dplyr` package is very useful when we are dealing with data manipulation tasks (Wickham et al., 2021). This package offers us a cohesive set of functions, frequently referred to as "verbs," that are designed to facilitate common data manipulation activities. Below, we review some of the key "verbs" provided by the `dplyr` package:

1.  **`filter()`:** When we want to restrict our data to specific conditions, we can use `filter()`. For instance, this function allows us to include only those rows in our dataset that fulfill a condition we specify.

2.  **`select()`:** If we are interested in retaining specific variables (columns) in our data, `select()` is our function of choice. It is particularly useful when we have datasets with many variables, but we only need a select few.

3.  **`arrange()`:** If we wish to reorder the rows in our dataset based on our selected variables, we can use `arrange()`. By default, `arrange()` sorts in ascending order. However, we can use the `desc()` function to sort in descending order.

4.  **`mutate()`:** To create new variables from existing ones, we utilize the `mutate()` function. It is particularly helpful when we need to conduct transformations or generate new variables that are functions of existing ones.

5.  **`summarise()`:** To produce summary statistics of various variables, we use `summarise()`. We frequently use it with `group_by()`, enabling us to calculate these summary statistics for distinct groups within our data.

Moreover, one of the significant advantages of `dplyr` is the ability to chain these functions together using the pipe operator `%>%` for a more streamlined and readable data manipulation workflow. \[2\]

## The pipe operator **%\>%**

1.  The `%>%` operator, colloquially known as the "pipe" operator, plays a vital role in enhancing the effectiveness of the `dplyr` package.

2.  The purpose of this operator is to facilitate a more readable and understandable chaining of multiple operations.

3.  In a typical scenario in R, when we need to carry out multiple operations on a data frame, each function call must be nested within another. This could lead to codes that are difficult to comprehend due to their complex and nested structure.

4.  However, the pipe operator comes to our rescue here. It allows us to rewrite these nested operations in a linear, straightforward manner, greatly enhancing the readability of our code. \[2\]

## Illustration: Using dplyr on `mtcars` data

### Loading required R packages

```{r, warning=FALSE}
# Load the required libraries, suppressing annoying startup messages
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
```

*Aside:* When we load the `dplyr` package using `library(dplyr)`, R displays messages indicating that certain functions from `dplyr` are masking functions from the `stats` and `base` packages. We could instead prevent the display of package startup messages by using `suppressPackageStartupMessages(library(dplyr))` or adding `library(dplyr, quietly = TRUE, warn.conflicts = FALSE)`

### Reading and Viewing the mtcars dataset as a tibble

```{r, warning=FALSE}
# Read the mtcars dataset into a tibble called tb
tb <- as_tibble(mtcars)
```

-   The `as_tibble()` function is used to convert the built-in `mtcars` dataset into a tibble object, named `tb`.

**Exploring the data**:

-   The `head()` function is called on `tb` to display the first six rows of the dataset. This is a quick way to visually inspect the first few entries.

-   The `glimpse()` function is used to provide a more detailed view of the `tb` object, showing the column names and their respective data types, along with a few entries for each column.

```{r, warning=FALSE}
# Display the first few rows of the dataset
head(tb)
```

```{r, warning=FALSE}
# Display the structure of the dataset
glimpse(tb)
```

**Changing data types**

```{r, warning=FALSE}
# Convert several numeric columns into factor variables
tb$cyl <- as.factor(tb$cyl)
tb$vs <- as.factor(tb$vs)
tb$am <- as.factor(tb$am)
tb$gear <- as.factor(tb$gear)
```

-   Factors are used in statistical modeling to represent categorical variables.

-   The `as.factor()` function is used to convert the '`cyl`', '`vs`', '`am`', and '`gear`' columns from numeric data types to factors.

-   In our case, these four variables are better represented as categories rather than numerical values. For instance, '`cyl`' represents the number of cylinders in a car's engine, '`vs`' is the engine shape, '`am`' is the transmission type, and '`gear`' is the number of forward gears; all of these are categorical in nature, hence the conversion to factor.

-   At this point, we can call the `glimpse()` function again to review the data structures.

```{r, warning=FALSE}
# Display the structure of the dataset, again
glimpse(tb)
```

-   Notice that the datatypes are now modified and the tibble is ready for further exploration. \[2\]

### Using `dplyr` to explore the `mtcars` tibble

1.  **`filter()`:** Recall that this function is used to select subsets of rows in a tibble. It takes logical conditions as inputs and returns only those rows where the conditions hold true. Suppose we wanted to filter the `mtcars` dataset for rows where the `mpg` is greater than 25.

```{r, warning=FALSE}
tb %>% 
  filter(mpg > 25)
```

-   This code filters the rows where the miles per gallon (mpg) are greater than 25.

2.  Suppose we want to filter cars where the miles per gallon (mpg) are greater than 25 AND the number of gears is equal to 5.

```{r, warning=FALSE}
tb %>% 
  filter(mpg > 25 & gear == 5)
```

-   This code shows that we can impose more than one logical condition in the filter. It filters by two conditions `mpg > 25 & gear == 5`

```{r, warning=FALSE}
tb %>% 
  filter(mpg > 25, gear == 5)
```

-   This code shows an alternate way of setting AND conditions.

-   R provides the standard suite of comparison operators: `\>`, `\>=`, `\<`, `\<=`, `!=` (not equal), and `==` (equal). It allows us to use common Boolean operators `&` (and), `|` (or) and `!` (not).

```{r, warning=FALSE}
tb %>% 
  filter(mpg > 30 | gear == 5)
```

-   This code demonstrates the use of the `|` (or) operator.

3.  **`select()`**: Recall that this function is used to select specific columns. Suppose we want to select `mpg`, `hp`, `cyl` and `am` columns.

```{r, warning=FALSE}
tb %>% 
  select(mpg, hp, cyl, am)
```

-   The tibble will only contain the `mpg` (miles per gallon), `hp` (horsepower), `cyl` (cylinders) and `am` transmission columns selected from the dataset.

4.  Now suppose we wanted to both filter and select. Specifically, suppose we want to:

-   filter cars where the miles per gallon (mpg) are greater than 20 AND number of gears is equal to 5
-   select `mpg`, `hp`, `cyl` and `am` columns for these cars.

```{r, warning=FALSE}
filterAndSelect <- tb %>% 
  filter(mpg > 20 & gear == 5) %>% 
  select(mpg, hp, cyl, am)
filterAndSelect
```

-   Here, we have written code that utilizes `filter()` and `select()`. These two functions, in concert with the pipe operator (`%\>%`), create a **pipeline** of operations for data transformation. Breaking this down, we observe a two-step process:

-   `filter(mpg > 20 & gear == 5)`: Here, we are utilizing the `filter()` function to sift through the dataset `tb` and retain only those rows where `mpg` (miles per gallon) is more than 20 and the number of gears is equal to 5.

-   `select(mpg, hp, cyl, am)`: This function is then invoked to choose specific columns from our filtered dataset. In this instance, we have picked the columns `mpg`, `hp` (horsepower), `cyl` (cylinders), and `am` (transmission type). The resulting dataset, therefore, contains only these four columns from the filtered data.

5.  Suppose we wanted to select all the columns within a range. Specifically, suppose we wanted to select all the columns within cyl and wt, excluding all other columns. Recall that the original tibble has the following data columns.

```{r, warning=FALSE}
colnames(tb)
```

```{r, warning=FALSE}
tb %>% 
  select(cyl:wt)
```

-   `select(cyl:wt)`: This code selects all columns in the `tb` dataframe starting from `cyl` up to and including `wt`.
-   Only the five columns {cyl, disp, hp, drat, wt} get selected. This is a particularly useful feature when dealing with dataframes that have a large number of columns, and we are interested in a contiguous subset of those columns

6.  Alternately, suppose instead that we wanted to select all columns except those within the range of `cyl` and `wt`.

```{r, warning=FALSE}
tb %>% 
  select(-cyl:wt)
```

`select(-cyl:wt)`: The - sign preceding the cyl:wt range denotes exclusion. Consequently, this selects all columns in the `tb` dataframe, excluding those from `cyl` to `wt` inclusive.

7.  **`arrange()`:** Recall that this function is used to reorder rows in a tibble by one or more variables. By default, it arranges rows in ascending order.

-   Suppose we want to select only the `mpg` and `hp` columns, where `hp>200` and we want to sort the result in descending order of `mpg`.

```{r, warning=FALSE}
tb %>% 
  select(mpg, hp) %>% 
  filter(hp>200) %>% 
  arrange(desc(mpg))
```

`tb %>% select(mpg, hp)`: The select function is used here to extract only the `mpg` and `hp` columns from the `tb` dataframe.

`filter(hp>200)`: The filter function is used to extract the cars where horsepower `hp>200`.

`arrange(desc(mpg))`: The arrange function is then used to order the rows in descending order (`desc`) based on the `mpg` column.

8.  **Benefit from using %\>%**: Suppose we wanted to subset the data as follows.

-   Select cars with 6 cylinders (`cyl` == 6).
-   Choose only the `mpg` (miles per gallon), `hp` (horsepower) and `wt` (weight) columns.
-   Arrange in descending order by `mpg`.

**Without** using the pipe operator, we would have to nest the operations, as follows:

```{r, warning=FALSE}
arrange(select(filter(tb, cyl == 6), mpg, hp, wt), desc(mpg))
```

-   Using the pipe operator, we could write the code more efficiently as follows:

```{r, warning=FALSE}
tb %>%
  filter(cyl == 6) %>%
  select(mpg, hp, wt) %>%
  arrange(desc(mpg))
```

-   This way, the pipe operator makes the code more readable and the sequence of operations is easier to follow.

9.  **`mutate()`:** Recall that this function is used to create new variables (columns) or modify existing ones.

-   Suppose we want to create a new column named `efficiency`, defined as the ratio of `mpg` to `hp`.

```{r, warning=FALSE}
mutated_data <- tb %>% 
  mutate(efficiency = mpg / hp) %>%
  select(mpg, hp, efficiency, cyl, am) %>%
  filter(mpg>30)

mutated_data
```

-   The resulting tibble contains a new column `efficiency`, which is the ratio of `mpg` to `hp`.

-   Note that `mutate()` does not modify the original dataset, but creates a new object `mutated_data` with the results. If we want to modify the original dataset, we would need to save the result back to the original variable.

**`transmute()`:** This is a variation of **`mutate()`** which does not retain the old columns.

```{r, warning=FALSE}
t1 <- tb %>% 
  filter(mpg>30) %>%
  transmute(efficiency = mpg / hp)

t1
```

-   Notice that `transmute()` retains only the newly created column.

10. **`summarise()`:**: Recall that this function is used to create summaries of data. It collapses a tibble to a single row. Suppose we want to calculate the mean of `mpg` in the `mtcars` dataset

```{r, warning=FALSE}
tb %>% 
  summarise(Mean_mpg = mean(mpg))
```

-   This code creates a tibble that contains a single row having the mean value of `mpg`.

-   We can extend this code to print both the mean and standard deviation, by slightly extending the above code, as follows.

```{r, warning=FALSE}
tb %>% 
  summarise(Mean_mpg = mean(mpg),
            SD_mpg = sd(mpg)
            )
```

11. To include additional statistical measures such as median, quartiles, minimum, and maximum in your summary data, we can use respective R functions within the `summarise()` function.

```{r, warning=FALSE}
summary_data <- tb %>% summarise(
  N = n(),
  Mean = mean(mpg),
  SD = sd(mpg),
  Median = median(mpg),
  Q1 = quantile(mpg, 0.25),
  Q3 = quantile(mpg, 0.75),
  Min = min(mpg),
  Max = max(mpg)
)
summary_data
```

-   We could convert this back into a standard dataframe and display it in a better formatted manner up to two decimal places, with the following code. \[2\]

```{r, warning=FALSE}
summary_data %>% 
  as.data.frame() %>% 
  round(2)
```

## Additional functions in the **dplyr** package

1.  **`rename()`:** The `rename()` function is utilized whenever we need to modify the names of some variables in our dataset. Without changing the structure of the original dataset, it allows us to give new names to chosen columns.

2.  **`group_by()`:** The `group_by()` function comes into play when we need to implement operations on individual groups within our data. By categorizing our data based on one or multiple variables, we are able to apply distinct functions to each group separately.

3.  **`slice()`:** To select rows by their indices, we use the `slice()` function. This is especially handy when we need specific rows, for example, the first 10 or last 10 rows, depending on a defined order.

4.  **`transmute()`:** When we want to generate new variables from existing ones and keep only these new variables, we use the `transmute()` function. It is similar to `mutate()`, but it only keeps the newly created variables, making it a powerful tool when we're only interested in transformed or calculated variables.

5.  **`pull()`:** The `pull()` function is used to extract a single variable as a vector from a dataframe. This function becomes very practical when we wish to isolate and work with a single variable outside its dataframe.

6.  **`n_distinct()`:** To enumerate the unique values in a column or vector, we use the `n_distinct()` function. It's an essential function when we want to know the number of distinct elements within a specific categorical variable. \[2\]

### Using `dplyr` to explore the `mtcars` tibble more

1.  **`rename()`:** Remember that this function is helpful in changing column names in our data. For instance, let us modify the name of the `mpg` column to `MPG` in the mtcars dataset.

```{r, warning=FALSE}
tb %>% 
  rename(MPG = mpg)
```

2.  **`group_by()`:** This function is key for performing operations within distinct groups of our data.

\*For example, let us group the dataset by `cyl` (number of cylinders) and `am` transmission and find the mean and standard deviation for each sub-group.

```{r, warning=FALSE}
tb %>% 
  group_by(cyl, am) %>%
  summarize(MeanMPG = mean(mpg),
            StdDevMPG = sd(mpg))
```

3.  **`slice()`:** Recall that this function is beneficial when we wish to choose rows based on their positions. For example, let us slice from row 3 to row 7 of the dataset.

```{r, warning=FALSE}
tb %>% 
  slice(3:7)
```

In this `sliced_data` tibble, only the first three rows from the mtcars dataset are included.

4.  **`pull()`**: Recall that this function is employed to remove a single variable from a dataframe as a vector. Let us isolate the `mpg` (miles per gallon) variable from the dataset.

```{r, warning=FALSE}
tb %>% 
  pull(mpg)
```

5.  **`n_distinct()`**: Recall that this function is used to count the distinct values in a column or vector. Let us count the number of distinct values in the`cyl`(cylinders) column from the dataset.

```{r, warning=FALSE}
tb %>% 
  summarise(countDistinctCyl = n_distinct(cyl))
```

-   This code shows the number of unique levels in the `cyl` column of the dataset.

## Summary of Chapter 6 -- Exploring *tibbles* & *dplyr*

This chapter has provided an overview of the `tibble` data structure and the `dplyr` package in the R programming language. We started with an introduction to `tibble`, a data structure in R that is an updated version of data frames with enhanced features for flexible and effective data management. These benefits include more user-friendly printing, reliable subsetting behavior, transparent handling of data types, and support for non-syntactic column names.

Subsequently, we shifted focus to the `dplyr` package, which is a powerful tool for data manipulation in R. This package offers a cohesive set of functions, often referred to as "verbs", which allow for efficient and straightforward manipulation of data. The key "verbs" in `dplyr`---`filter()`, `select()`, `arrange()`, `mutate()`, and `summarise()`--- have been explained and illustrated with examples. An integral component of the `dplyr` package, the pipe operator `%>%`, was also discussed. This operator allows for a more readable and understandable chaining of multiple operations in R, leading to cleaner and more straightforward code.

The chapter gives a comprehensive illustration of using `dplyr` on the `mtcars` dataset. This practical demonstration has involved applying `dplyr` functions to a dataset and explaining the process and results. In addition to the basics, the chapter has also touched upon additional `dplyr` functions such as `rename()`, `group_by()`, and `slice()`, enriching readers' understanding and competency in data manipulation using R.

Overall, this chapter has provided an in-depth understanding of `tibbles` and `dplyr`, their applications, and their importance in data manipulation and management in the R programming environment.

## References

\[1\] Müller, K., & Wickham, H. (2021). tibble: Simple Data Frames. R package version 3.1.3. https://CRAN.R-project.org/package=tibble

\[2\] Wickham, H., François, R., Henry, L., & Müller, K. (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. https://CRAN.R-project.org/package=dplyr

Wickham, H. (2014). Tidy data. Journal of Statistical Software, 59(10), 1-23.

https://www.jstatsoft.org/article/view/v059i10

Grolemund, G., & Wickham, H. (2017). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O'Reilly Media, Inc.
