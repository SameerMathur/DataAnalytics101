# Case (1 of 2): An Overview of the S&P500

**Chapter 17.**

## S&P 500

The S&P 500, also called the Standard & Poor's 500, is a stock market index that tracks the performance of 500 major publicly traded companies listed on U.S. stock exchanges. It serves as a widely accepted benchmark for assessing the overall health and performance of the U.S. stock market.

S&P Dow Jones Indices, a division of S&P Global, is responsible for maintaining the index. The selection of companies included in the S&P 500 is determined by a committee, considering factors such as market capitalization, liquidity, and industry representation.

The S&P is a float-weighted index, meaning the market capitalizations of the companies in the index are adjusted by the number of shares available for public trading. \[1\]

The performance of the S&P 500 is frequently used to gauge the broader stock market and is commonly referenced by investors, analysts, and financial media. It provides a snapshot of how large-cap U.S. stocks are faring and is considered a reliable indicator of overall market sentiment.

Aside: Typically, the S&P 500 index consists of 500 stocks. However, in reality, there are actually 503 stocks included. This discrepancy arises because three of the listed companies have multiple share classes, and each class is considered a separate stock that needs to be included in the index. \[1\]

**Strengths**:

1.  **Diverse Representation**: The S&P 500 isn't fixated on a single industry. From technology to healthcare, it offers a panoramic view of various economic sectors, making it an inclusive representation of the U.S. corporate sector.

2.  **Benchmark for Investors**: For many fund managers, outperforming the S&P 500 stands as a golden standard. It's a yardstick, establishing it as a critical touchstone for gauging investment success.

3.  **Liquidity and Visibility**: Constituent companies enjoy high liquidity and are subject to rigorous screening processes, ensuring that the index represents financially viable entities.

**Critiques**:

1.  **Market Capitalization Weighting**: The index is weighted by market capitalization, meaning companies with higher market values have a more pronounced effect on its performance. Critics argue this approach can skew perceptions, especially during market bubbles when certain sectors are overvalued.

2.  **Exclusivity**: Despite its broad purview, 500 companies cannot encapsulate the entire U.S. economy. Many sectors, especially emerging industries or smaller businesses, might not be adequately represented.

3.  **Potential for Complacency**: The prominence of the S&P 500 has led many investors to adopt passive investment strategies, tracking the index rather than actively managing portfolios. Detractors argue this might lead to market inefficiencies and reduced capital allocation efficacy.

While the S&P 500 remains an influential and pivotal tool for investors, its dominance prompts a double-edged sword of advantages and critiques. In a constantly evolving economic landscape, understanding both its power and limitations is essential for informed financial decision-making. \[2\]

The broad purpose of this Case Study is to review and analyze the different sectors and stocks within the S&P500.

## S&P 500 Data

### Load some useful R packages

```{r, warning=FALSE}
# Load the required libraries, suppressing annoying startup messages
library(dplyr, quietly = TRUE, warn.conflicts = FALSE) # For data manipulation
library(tibble, quietly = TRUE, warn.conflicts = FALSE) # For data manipulation
library(ggplot2, quietly = TRUE, warn.conflicts = FALSE) # For data visualization
library(ggpubr, quietly = TRUE, warn.conflicts = FALSE) # For data visualization

library(gsheet, quietly = TRUE, warn.conflicts = FALSE) # For Google Sheets
library(rmarkdown, quietly = TRUE, warn.conflicts = FALSE) # For writing
library(knitr, quietly = TRUE, warn.conflicts = FALSE) # For tables
library(kableExtra, quietly = TRUE, warn.conflicts = FALSE) # For tables
library(scales)  # For formatting currency
```

### Read the S&P500 data from a Google Sheet into a tibble

1.  We will analyze a real-world, recent dataset containing information about the S&P500 stocks, sourced from TradingView.com. \[3\]

2.  The dataset is located in a <a href="https://docs.google.com/spreadsheets/d/14mUlNNpeuV2RouT9MKaAWKUpvjRijzQu40DdWJgyKPQ/" target="_blank">Google Sheet</a> and periodically updated.

3.  The complete URL of the Google Sheet that has the data is

    <https://docs.google.com/spreadsheets/d/14mUlNNpeuV2RouT9MKaAWKUpvjRijzQu40DdWJgyKPQ/>

4.  Its Google Sheet ID is: `14mUlNNpeuV2RouT9MKaAWKUpvjRijzQu40DdWJgyKPQ`.

## Loading the data into R

1.  We can use the function `gsheet2tbl` in package `gsheet` to read the Google Sheet into a tibble , as demonstrated in the following code.

```{r, warning=FALSE}
# Read S&P500 stock data present in a Google Sheet.
library(gsheet)
prefix <- "https://docs.google.com/spreadsheets/d/"
sheetID <- "14mUlNNpeuV2RouT9MKaAWKUpvjRijzQu40DdWJgyKPQ"
url500 <- paste(prefix,sheetID) # Form the URL to connect to
sp500Data <- gsheet2tbl(url500) # Read it into a tibble called sp500Data
```

2.  **Note**: This data is current, as of **`r sp500Data$Date[1]`**

## S&P Global Industry Classification Standard (GICS^®^)

1.  In this case study, we will classify and analyze the S&P 500 stocks based on the GICS standard!
2.  The Global Industry Classification Standard (GICS^®^) was developed in 1999 by S&P Dow Jones Indices and MSCI. The GICS methodology aims to enhance the investment research and asset management process for financial professionals worldwide. The GICS methodology has been widely accepted as an industry analysis framework for investment research, portfolio management and asset allocation. \[4\]
3.  The GICS classification consists of **11** sectors, -- {Communication Services, Consumer Discretionary, Consumer Staples, Energy, Financials, Health Care, Industrials, Information Technology, Materials, Real Estate, Utilities}. The classification of each stock in the S&P 500 according to GICS is available at the following Google Sheet:

[https://docs.google.com/spreadsheets/d/1WrVA8dPYvQsc_mXVctgTntRLS02qd7ubzcdAsw03Lgk/](https://docs.google.com/spreadsheets/d/1WrVA8dPYvQsc_mXVctgTntRLS02qd7ubzcdAsw03Lgk/edit#gid=0){.uri}

4.  For this file, the Google Sheet ID is `1WrVA8dPYvQsc_mXVctgTntRLS02qd7ubzcdAsw03Lgk`and we read this classification data into a tibble, we name `gics`, using similar code.

```{r}
# Read GICS classificaiton of S&P 500 stocks from a Google Sheet.
library(gsheet)
prefix2 <- "https://docs.google.com/spreadsheets/d/"
sheetID2 <- "1WrVA8dPYvQsc_mXVctgTntRLS02qd7ubzcdAsw03Lgk"
urlgics <- paste(prefix2, sheetID2) # Form the URL to connect to
gics <- gsheet2tbl(urlgics) # Read it into a tibble called gics
```

5.  Next, we join the two tibbles, using "Stock" as the key and name our joint tibble `sp500`, as follows.

```{r}
# Merging dataframes
sp500 <- merge(sp500Data, 
               gics , 
               id = "Stock")
```

## Review the S&P 500 data

1.  The data corresponds to **`r nrow(sp500)`** companies that are part of the S&P500 and includes `r ncol(sp500)` data columns, as of **`r sp500$Date[1]`**

```{r}
dim(sp500)
```

2.  The first ten stocks in the S&P500 data, their GICS Sector and their recent prices are as follows:

```{r}
sp500 %>%
  select(Stock, Description, GICSSector) %>%
  head(10) %>%
  kable("html", caption = "The first 10 companies in the S&P500 dataset") %>% 
  kable_styling()
```

3.  Data Columns

-   The data comprises of the following `r ncol(sp500)` columns:

```{r}
colnames(sp500) 
```

-   The names of the data columns are self-explanatory. The Financial terms are explained in depth on multiple external websites such as www.Investopedia.com

### Rename Data Columns

4.  The names of the data columns are lengthy and confusing. We will rename the data columns to make it easier to work with the data.

```{r, warning=FALSE}
# Define a mapping of new column names
new_names <- c(
  "Stock", "Date", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "Rating",
  "Security", "GICSSector", "GICSSubIndustry"
)
# Rename the columns using the new_names vector
colnames(sp500)<-new_names
```

5.  We review the column names again after renaming them, using the `colnames()` function.

```{r, warning=FALSE}
colnames(sp500)
```

### Understand the Data Columns

6.  Our next goal is to gain a deeper understanding of what the data columns mean. We reorganize the column names into eight tables, labeled Table 1a, 1b.. 1h.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
library(tibble)
new_names <- c(
  "Stock", "Date", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "Rating",
  "Security", "GICSSector", "GICSSubIndustry"
)
descriptions <- c(
  "Stock Ticker (e.g. AAL)",
  "Date (e.g. \"7/15/2023\")",
  "Name of the company (e.g \"American Airlines Group, Inc.\")",
  "Sector the stock belongs to (e.g. \"Transportation\")",
  "Industry the stock belongs to (e.g \"Airlines\")",
  "Market capitalization of the company",
  "Recent Stock Price",
  "52-Week Low Price",
  "52-Week High Price",
  "Return on Equity",
  "Return on Assets",
  "Return on Invested Capital",
  "Gross Profit Margin",
  "Operating Profit Margin",
  "Net Profit Margin",
  "Price-to-Earnings Ratio",
  "Price-to-Book Ratio",
  "Enterprise Value to EBITDA Ratio",
  "EBITDA",
  "Earnings per Share",
  "EBITDA Year-over-Year Growth",
  "EBITDA Quarterly Year-over-Year Growth",
  "EPS Year-over-Year Growth",
  "EPS Quarterly Year-over-Year Growth",
  "Price-to-Free Cash Flow",
  "Free Cash Flow",
  "Free Cash Flow Quarterly Year-over-Year Growth",
  "Debt-to-Equity Ratio",
  "Current Ratio",
  "Quick Ratio",
  "Dividend Yield",
  "Annual Dividends per Share Year-over-Year Growth",
  "Price-to-Sales Ratio",
  "Revenue Year-over-Year Growth",
  "Revenue Quarterly Year-over-Year Growth",
  "Technical Rating",
  "Name of the company (e.g \"American Airlines Group, Inc.\")",
  "Sector, as per GICS Classification",
  "Sub-Industry, as per GICS Classification"
)
column_info <- tibble(ColumnName = new_names, Description = descriptions)
```

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
# Create different Tables explaining different columns in the data
library(dplyr)
stockCols = slice(column_info, c(1,2,3,38,39,6,7))
taCols = slice(column_info, c(8,9,36))
profitabilityCols = slice(column_info, c(10:15))
earningsCols = slice(column_info, c(16:24))
fcfCols = slice(column_info, c(25:27))
liquidityCols = slice(column_info, c(28:30))
dividendCols = slice(column_info, c(31:32))
revenueCols = slice(column_info, c(33:35))
```

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
suppressPackageStartupMessages(library(kableExtra))
table1a <- knitr::kable(stockCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1a: Data Columns giving basic Company Information" = ncol(column_info)))
table1b <- knitr::kable(taCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1b: Data Columns related to Pricing and Technical Analysis" = ncol(column_info)))
table1c <- knitr::kable(profitabilityCols, "html") %>% kable_styling() %>% add_header_above(c("Table 1c: Data Columns related to Profitability" = ncol(column_info)))
table1d <- knitr::kable(earningsCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1d: Data Columns related to Earnings" = ncol(column_info)))
table1e <- knitr::kable(fcfCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1e: Data Columns related to Free Cash Flow" = ncol(column_info)))
table1f <- knitr::kable(liquidityCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1f: Data Columns related to Liquidiy" = ncol(column_info)))
table1g <- knitr::kable(revenueCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1g: Data Columns related to Revenue" = ncol(column_info)))
table1h <- knitr::kable(dividendCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1h: Data Columns related to Dividends" = ncol(column_info)))
```

a.  The column names described in Table 1a. concern basic **Company Information** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1a 
```

b.  The column names described in Table 1b. are related to **Technical Analysis**, including the 52-Week High and Low prices.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1b
```

c.  The column names described in Table 1c. are related to the **Profitability** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1c
```

d.  The column names described in Table 1d are related to the **Earnings** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1d
```

e.  The column names described in Table 1e are related to the **Free Cash Flow** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1e
```

f.  The column names described in Table 1f concern the **Liquidity** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1f
```

g.  The column names described in Table 1g are related to the **Revenue** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1g
```

h.  The column names described in Table 1h are related to the **Dividends** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1h
```

### Stock Prices, 52-Week Low, High; Market Cap in Billions

We want to analyze stock prices relative to their 52 Week Low and 52 Week High respectively, to understand their relative price attractiveness.

Hence, a new column named `Low52WkPerc` is being added. The column contains the percentage change between the current price (`Price`) and its 52-week low (`Low52Wk`). The formula used is: $$Low52WkPerc = \frac{(CurrentPrice - 52WeekLow)*100}{52WeekLow}$$

Another column named `High52WkPerc` represents the percentage change between the 52-week high (`High52Wk`) and the current price (`Price`). We round off the data to two decimal places for clarity.

```{r}
library(dplyr)
sp500 <- sp500 %>%
  mutate(Low52WkPerc = round((Price - Low52Wk) * 100 / Low52Wk, 2),
         High52WkPerc = round((High52Wk - Price) * 100 / High52Wk, 2),
         MarketCapBillions = round(MarketCap / 1e9, 3) # Convert MarketCap to billions
         )
```

For convenience, we format the Prices.

```{r}
library(dplyr)
library(scales)  # For formatting currency

sp500 <- sp500 %>%
  mutate(
    Price = scales::dollar(round(Price, 2)),  # format the Price as a dollar amount
    High52Wk = scales::dollar(round(High52Wk, 2)),  # format the 52 Week High 
    Low52Wk = scales::dollar(round(Low52Wk, 2))  # format the 52 Week Low 
  )
```

### Analysis of Stock Ratings

1.  In the data, the S&P500 shares have Technical Ratings such as {Strong Buy, Buy, Neutral, Sell, Strong Sell}. Since each Stock has a unique Technical Rating, it makes sense to model the data column Rating as a `factor()` variable.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sp500$Rating <- as.factor(sp500$Rating)
```

2.  We confirm that Rating is now modelled as a factor variable, using `str()` and use `levels()` to review the different levels it can take.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
str(sp500$Rating)
levels(sp500$Rating)
```

3.  The `table()` function allows us to count how many stocks have each Rating. see how many stocks have ratings ranging from "Strong Sell" to "Strong Buy". This completes our review of Rating.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
table(sp500$Rating)
```

### Analysis of GICS Sectors in the S&P500

-   The S&P 500 comprises a wide array of sectors, reflecting the diverse American corporate landscape.

-   The data showcases the S&P500 divided across `r length(unique(sp500$GICSSector))` Sectors. Each stock belongs to a unique sector and it makes sense to model `GICSSector` as a `factor`.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sp500$GICSSector <- as.factor(sp500$GICSSector)
```

2.  We confirm that `GICSSector` is now modelled as a factor variable and review the different levels it can take.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
str(sp500$GICSSector)
levels(sp500$GICSSector)
```

-   We note that the S&P500 consists of `r nrow(sp500)` stocks, divided across `r length(unique(sp500$GICSSector))` sectors.

```{r}
library(ggplot2)  # For creating plots
library(dplyr)    # For data manipulation

sp500 %>%
  mutate(
    # Reorder the 'GICSSector' factor levels based on the count of each sector
    # 'table(GICSSector)[GICSSector]' calculates the frequency of each sector
    # 'reorder' reorders the levels of 'GICSSector' based on these frequencies
    GICSSector = reorder(GICSSector, 
                         table(GICSSector)[GICSSector])
  ) %>%
  # Start a ggplot with 'GICSSector' on the y-axis
  ggplot(aes(y = GICSSector)) + 
    # Create a bar plot; 'geom_bar' counts the frequency for each sector
    # 'fill = GICSSector' colors the bars based on the sector
    geom_bar(aes(fill = GICSSector)) +
    # Add text labels on the bars showing the count of stocks in each sector
    # 'stat = "count"' calculates the count for each sector
    # 'label = after_stat(count)' adds these counts as labels on the bars
    geom_text(stat = 'count', 
              aes(label = after_stat(count))) +
    labs(title = "Stocks by GICS Sector",  # Title of the plot
         x = "No. of Stocks",              # Label for the x-axis
         y = "GICS Sector")                # Label for the y-axis
```

-   Thus, we can see how many stocks are part of each sector. We can sum them to confirm that they add up to `r sum(table(sp500$GICSSector))` stocks.

### MarketCap by GICS Sector

1.  We review the Market Cap of S&P500 stocks across GICS Sectors. We summarize the total Market Cap for each GICS Sector, using the following code.

```{r}
# Calculate Market Cap by Sector

MarketCapbySector <- sp500 %>%
  mutate(Market_Cap_Billions = round(MarketCap / 1000000000, 2)) %>%  
  group_by(GICSSector) %>%
  summarise(MarketCapBillions = sum(Market_Cap_Billions, na.rm = TRUE)) %>%
  arrange(-MarketCapBillions)
```

2.  We create a bar plot of Market Cap by GICS Sector

```{r}
# Create a bar plot of Market Cap by GICS Sector, 
ggplot(MarketCapbySector, 
       aes(y = reorder(GICSSector, 
                       MarketCapBillions),  # Y-axis: GICSSector reordered 
           x = MarketCapBillions,  # X-axis: Market Capitalization in billions
           fill = GICSSector)) +  # Fill color of the bars based on GICSSector
  geom_bar(stat = "identity") +  # 'stat = "identity"' to use MarketCapBillions for bars
  labs(title = "Market Capitalization (Billion USD) by GICS Sector",  
       y = "GICS Sector",  # Label for the y-axis
       x = "Market Cap (Billions USD)") +  # Label for the x-axis
  geom_text(aes(label = MarketCapBillions))  # Add text labels to the bars 
```

3.  The S&P500 has a combined Market Cap of `r format(sum(MarketCapbySector$MarketCapBillions), scientific = FALSE)` Billion USD.

### Highest Market Cap Stocks in each GICS Sector

1.  Suppose we wanted to find the top two stocks with the highest market capitalization in each GICS Sector.
2.  We could group the data by **`GICSSector`**; arrange the data in descending order of **`MarketCap`** within each sector; slice the top 2 entries for each group. Here's the R code to accomplish this:

```{r}
# Find the top two stocks by MarketCap in each GICS Sector 
top_stocks_by_sector <- sp500 %>%
  group_by(GICSSector) %>%
  arrange(desc(MarketCap)) %>%
  slice_head(n = 2) %>%
  ungroup() %>%
  arrange(GICSSector)  # Arrange the final data by GICSSector

# Select only the specified columns and create a table using kable
top_stocks_by_sector %>%
  select(GICSSector, Stock, StockName, MarketCapBillions) %>%
  kable("html", caption = "Top Two Stocks by Market Capitalization, for each GICS Sector") %>%
  kable_styling()
```

### Prices relative to 52-Week-Low and 52-Week-High of each GICS Sector

We analyze the distribution of stock prices relative to their 52 Week Low, measured as `Low52WkPerc = (Price - 52-Week-Low)/(52-Week-Low)`. In fact, we review this distribution for each GICS Sector, to understand which sector has stocks priced relatively closest to their 52-Week Low prices.

We also do this for stock prices relative to their 52 Week High, measured as `High52WkPerc = (52-Week-High - Price)/(52-Week-High)`.

Table 2

```{r}
library(dplyr)
library(kableExtra)

# Calculate Q1, Median, and Q3 for Low52WkPerc and High52WkPerc within each GICS sector
sector_summary_stats <- sp500 %>%
  group_by(GICSSector) %>%
  summarise(
    Low_Q1 = round(quantile(Low52WkPerc, 0.25, na.rm = TRUE), 1),
    Low_Median = round(median(Low52WkPerc, na.rm = TRUE), 1),
    Low_Q3 = round(quantile(Low52WkPerc, 0.75, na.rm = TRUE), 1),
    High_Q1 = round(quantile(High52WkPerc, 0.25, na.rm = TRUE), 1),
    High_Median = round(median(High52WkPerc, na.rm = TRUE), 1),
    High_Q3 = round(quantile(High52WkPerc, 0.75, na.rm = TRUE), 1)
  ) %>%
  ungroup()

# Sort by Low Q1
sector_summary_stats <- sector_summary_stats %>%
  arrange(Low_Q1)

# Reapply formatting with percentage symbol
sector_summary_stats <- sector_summary_stats %>%
  mutate(
    across(ends_with("Q1"), ~paste0(., "%")),
    across(ends_with("Median"), ~paste0(., "%")),
    across(ends_with("Q3"), ~paste0(., "%"))
  )

# Create a formatted table using kable
sector_summary_stats %>%
  kable("html", 
        caption = "Q1, Median, and Q3 of Low52WkPerc and High52WkPerc by GICS Sector, Sorted by Low Q1") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))

```

Notice that Low_Q1 represents the 25th percentile of the distribution of Low52WkPerc, while High_Q3 represents the 75th percentile of the distribution of High52WkPerc.

We want to identify the GICS Sector(s) whose stocks are closest to their 52-Week Low and relatively furthest from their 52-Week High prices. Once way of doing this is to create a scatterplot, as follows.

```{r}
library(ggplot2)
library(dplyr)

# Convert percentage strings back to numeric for plotting
plot_data <- sector_summary_stats %>%
  mutate(
    Low_Q1_numeric = as.numeric(gsub("%", "", Low_Q1)),
    High_Q3_numeric = as.numeric(gsub("%", "", High_Q3))
  )

# Create a scatterplot with larger circle sizes
ggplot(plot_data, aes(x = Low_Q1_numeric, y = High_Q3_numeric, color = GICSSector)) +
  geom_point(size = 4) +  # Increase the size of the points
  labs(
    title = "Scatterplot of Low Q1 vs High Q3 by GICS Sector",
    x = "Low Q1 (%)",
    y = "High Q3 (%)",
    color = "GICS Sector"
  ) +
  theme_minimal()  # Use a minimal theme for better aesthetics

```

-   **This scatterplot suggests that the Consumer Staples sector is closest to 52-Week Low and furthest from 52-Week High.**

Next, we can do the reverse to determine which Sector is furthest away from 52-Week Low and closest to 52-Week High prices.

```{r}
library(ggplot2)
library(dplyr)

# Convert percentage strings back to numeric for plotting
plot_data <- sector_summary_stats %>%
  mutate(
    High_Q1_numeric = as.numeric(gsub("%", "", High_Q1)),
    Low_Q3_numeric = as.numeric(gsub("%", "", Low_Q3))
  )

# Create a scatterplot with larger circle sizes
ggplot(plot_data, aes(x = High_Q1_numeric, y = Low_Q3_numeric, color = GICSSector)) +
  geom_point(size = 4) +  # Increase the size of the points
  labs(
    title = "Scatterplot of High Q1 vs Low Q3 by GICS Sector",
    x = "High Q1 (%)",
    y = "Low Q3 (%)",
    color = "GICS Sector"
  ) +
  theme_minimal()  # Use a minimal theme for better aesthetics

```

-   **This scatterplot suggests that the Communication Services sector is closest to 52-Week Low and furthest from 52-Week High.**

### Profitability of each GICS Sector

The following table gives us the Median of different profitability metrics {ROE, ROA, ROIC, OPM, NPM}, for each GICS sector.

```{r}
library(dplyr)
library(kableExtra)

# Calculate the median values for Profitability metrics 
median_financials <- sp500 %>%
  group_by(GICSSector) %>%
  summarise(
    Med_ROE = round(median(ROE, na.rm = TRUE), 1),
    Med_ROA = round(median(ROA, na.rm = TRUE), 1),
    Med_ROIC = round(median(ROIC, na.rm = TRUE), 1),
    Med_OPM = round(median(OperatingMargin, na.rm = TRUE), 1),
    Med_NPM = round(median(NetMargin, na.rm = TRUE), 1)
  ) %>%
  arrange(desc(Med_ROE)) # Sort the table based on Median ROE in descending order

# Create a formatted table using kable
median_financials %>%
  kable("html", 
        caption = "Median Financial Metrics by GICS Sector") %>%
  kable_styling()
```

-   **We notice that the Information Technology GICS Sector has the relatively largest profitability numbers.**

-   **We also note that the Consumer Staples has fairly good profitability numbers as well, relative to all the other sectors.**

### Earnings of each GICS Sector

We review the distribution of Price to Earnings (PE) and Price to Book (PB) ratios, across different sectors. Obviously, the smaller the PE and PB ratio, the better it is.

We also review how the Earnings Per Share have increased or decreased across the different GICS sectors.

```{r}
library(dplyr)
library(kableExtra)

# Assuming 'sp500' is your dataset and it includes the columns PE, PB, EPS_QYOY, and EPS_YOY

# Calculate the median values for Earnings related metrics
median_earnings <- sp500 %>%
  group_by(GICSSector) %>%
  summarise(
    Med_PE = round(median(PE, na.rm = TRUE), 1),
    Med_PB = round(median(PB, na.rm = TRUE), 1),
    Med_EPS_QYOY = round(median(EPS_QYOY, na.rm = TRUE), 1),
    Med_EPS_YOY = round(median(EPS_YOY, na.rm = TRUE), 1)
  ) %>%
  ungroup() # Removed the sorting to keep the table unsorted

# Create a formatted table using kable
median_earnings %>%
  kable("html", 
        caption = "Median Earnings Metrics (PE, PB, EPS_QYOY, EPS_YOY) by GICS Sector") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))


```

-   **We conlcude that from a Price to Earnings ratio perspective, the PE ratio is relatively lowest for the Energy sector.**

-   **From an Earnings per Share Growth perspective, the Consumer Discretionary GICS sector has performed the best.**

Thus, in this survey, we have analyzed the distribution of prices and also the distribution of profitability and earnings growth metrics for the different GICS sector. With this, we conclude our brief descriptive survey of the S&P500 stocks.

## Summary of Chapter 17 -- Case (1 of 2): An Overview of the S&P500

Chapter Summary: S&P 500 Case Study

This chapter presents a comprehensive case study of the S&P 500, a crucial index in the U.S. stock market, comprising 500 major publicly traded companies. The chapter begins by introducing the S&P 500, including its management by S&P Dow Jones Indices and its significance as a benchmark for U.S. stock market health. Key strengths of the S&P 500 are highlighted, such as its diverse representation across various economic sectors and its role as a benchmark for investors. However, the chapter also discusses critiques, including the potential for market misrepresentation due to its market capitalization weighting and the issue of exclusivity, as it doesn't fully represent the entire U.S. economy.

The chapter then delves into a detailed data analysis using R programming, starting with loading necessary R packages and reading S&P 500 data from a Google Sheet. The data, sourced from TradingView.com, is organized into a tibble and classified according to the Global Industry Classification Standard (GICS). Further, the chapter categorizes data columns into various aspects like company information, profitability, earnings, and others. It also includes renaming and understanding these data columns for more accessible analysis.

Significant analyses in the chapter include: 1. Stock Prices Analysis: Comparison of stock prices relative to their 52-Week Low and High. 2. GICS Sectors Analysis: Examination of the distribution of stocks and market capitalization across different GICS sectors. 3. Profitability and Earnings Analysis: Evaluation of the profitability and earnings of companies in each GICS sector.

Each analysis is supported with R code snippets and explanations, providing a clear understanding of the methodologies and results. The chapter concludes by summarizing insights from the analyses, such as sector-wise profitability and earnings growth, offering a nuanced understanding of the S&P 500 index's composition and performance.

This chapter serves as an in-depth review and analysis of the S&P 500, blending theoretical knowledge with practical data analysis skills, making it a valuable resource for those interested in financial markets and data analytics.

## References

**S&P 500**

\[1\] https://www.investopedia.com/terms/s/sp500.asp

\[2\] S&P Global: S&P Global. (n.d.). S&P 500. Retrieved September 14, 2023, from https://www.spglobal.com/spdji/en/indices/equity/sp-500/

MarketWatch: MarketWatch. (n.d.). S&P 500 Index. Retrieved September 14, 2023, from https://www.marketwatch.com/investing/index/spx

Bloomberg: Bloomberg. (n.d.). S&P 500 Index (SPX:IND). Retrieved September 14, 2023, from https://www.bloomberg.com/quote/SPX:IND

\[3\] TradingView.com <https://www.tradingview.com/screener/>

\[4\] GICS: Global Industry Classification Standard: <https://www.spglobal.com/spdji/en/landing/topic/gics/>
