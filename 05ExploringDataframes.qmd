# Exploring Dataframes

*July 29, 2023.*

The mtcars dataset is a readily available set in R, originally sourced from the 1974 Motor Trend US magazine. It includes data related to fuel consumption and 10 other factors pertaining to car design and performance, recorded for 32 vehicles from the 1973-74 model years.

To load the mtcars dataset in R, use this command:

```{r}
data(mtcars)
```

## Reviewing a dataframe

View(): This function opens the dataset in a spreadsheet-style data viewer.

```{r, eval=FALSE}
View(mtcars)
```

head(): This function prints the first six rows of the dataframe.

```{r}
head(mtcars)
```

tail(): This function prints the last six rows of the dataframe.

```{r}
tail(mtcars)
```

dim(): This function retrieves the dimensions of a dataframe, i.e., the number of rows and columns.

nrow(): This function retrieves the number of rows in the dataframe.

ncol(): This function retrieves the number of columns in the dataframe.

```{r}
dim(mtcars)
nrow(mtcars)
ncol(mtcars)
```

names(): This function retrieves the column names of a dataframe.

colnames(): This function also retrieves the column names of a dataframe.

```{r}
names(mtcars)
```

```{r}
colnames(mtcars)
```

## Accessing data within a dataframe

\$: In R, the dollar sign \$ is a unique operator that lets us retrieve specific columns from a dataframe or elements from a list.

For instance, consider the dataframe mtcars. If we wish to fetch the data from the mpg (miles per gallon) column, we would use mtcars\$mpg. This action will yield a vector containing the data from the mpg column.

```{r}
# Extract the mpg column in mtcars dataframe as a vector
mpg_vector <- mtcars$mpg

# Print the mpg vector
print(mpg_vector)
```

This operator offers a simple and readable shortcut for accessing data.

\[\[: The usage of \$ is limited since it doesn't support character substitution for dynamic column access inside functions. In such cases, we resort to using double square brackets \[\[ or single square brackets \[.

As an example, if we have a character string stored in a variable var as var \<- "mpg", using mtcars\$var will not return the mpg column. But if we use mtcars\[\[var\]\] or mtcars\[, var\], we will correctly get the mpg column.

```{r}
# Let's say we have a variable var
var <- "mpg"

# Now we can access the mpg column in mtcars dataframe using [[
mpg_data1 <- mtcars[[var]]
print(mpg_data1)
```

```{r}
# Alternatively, we can use [
mpg_data2 <- mtcars[, var]
print(mpg_data2)
```

## Data Structures

str(): This function displays the internal structure of an R object.

```{r}
str(mtcars)
```

class(): This function is used to determine the class or data type of an object. It returns a character vector specifying the class or classes of the object.

```{r}
x <- c(1, 2, 3)  # Create a numeric vector
class(x)        # Output: "numeric"
```

```{r}
y <- "Hello, My name is Sameer Mathur!"  # Create a character vector
class(y)             # Output: "character"
```

class(x) returns "numeric" because x is a numeric vector. Similarly, class(y) returns "character" because y is a character vector.

```{r}
z <- data.frame(a = 1:5, b = letters[1:5])  # Create a data frame
class(z) # Output: "data.frame"
```

class(z) returns "data.frame" because z is a data frame.

```{r}
sapply(mtcars, class)
```

## Factors

In R, factors are a specific data type used for representing categorical variables or data with discrete levels or categories. They are employed to store data that has a limited number of distinct values, such as "male" or "female," "red," "green," or "blue," or "low," "medium," or "high."

Factors in R consist of both values and levels. The values represent the actual data, while the levels correspond to the distinct categories or levels within the factor. Factors are particularly useful for statistical analysis as they facilitate the representation and analysis of categorical data efficiently.

To change the data type of the am, cyl, vs, and gear variables in the mtcars dataset to factors, you can utilize the factor() function. Here's an example demonstrating how to achieve this:

```{r}
# Convert variables to factors
mtcars$am <- factor(mtcars$am)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
```

The code above applies the factor() function to each variable, thereby converting them to factors. By assigning the result back to the respective variables, we effectively change their data type to factors. This conversion retains the original values while establishing levels based on the distinct values present in each variable.

After executing this code, the am, cyl, vs, and gear variables in the mtcars dataset will be of the factor data type. And we can verify this by re-running the str() function

```{r}
str(mtcars)
```

When the cyl variable in the mtcars dataset is converted to a factor, the levels() function can be used to extract the distinct levels or categories of that factor. By executing levels(mtcars\$cyl), you will receive an output that reveals the levels present in the cyl variable.

For example, if the cyl variable has been transformed into a factor with levels "4", "6", and "8", the result of levels(mtcars\$cyl) will be a character vector displaying these three levels:

```{r}
levels(mtcars$cyl)
```

It is important to note that the order of the levels in the output corresponds to their appearance in the original data.

Utilizing the levels() function on factor variables in R allows you to examine the particular categories or levels present within a factor, aiding in understanding the data's composition and facilitating operations that target specific levels if necessary.

To change the base level of a factor variable in R, you can use the relevel() function. This function allows you to reassign a new base level by rearranging the order of the levels in the factor variable.

Here's an example of how you can change the base level of a factor variable:

```{r}
# Assuming 'cyl' is a factor variable with levels "4", "6", and "8"
mtcars$cyl <- relevel(mtcars$cyl, ref = "6")
```

In the code above, we apply the relevel() function to the cyl variable, specifying ref = "6" to set "6" as the new base level.

After executing this code, the levels of the mtcars\$cyl factor variable will be reordered, with "6" becoming the new base level. The order of the levels will be "6", "4", and "8" instead of the original order.

Changing the base level can be particularly useful when conducting statistical modeling or interpreting the effects of categorical variables in regression models. By selecting a specific level as the base, we can compare the effects of the other levels relative to the chosen base level, facilitating more meaningful analysis and interpretation.

For convenience, we will change the base level back to "4".

```{r}
# Assuming 'cyl' is a factor variable with levels "4", "6", and "8"
mtcars$cyl <- relevel(mtcars$cyl, ref = "4")
```

droplevels(): This function is helpful for removing unused factor levels. It removes levels from a factor variable that do not appear in the data, reducing unnecessary levels and ensuring that the factor only includes relevant levels.

```{r}
# Assuming 'cyl' is a factor variable with levels "4", "6", and "8"
# Check the levels of 'cyl' before removing unused levels
levels(mtcars$cyl)

# Remove unused levels from 'cyl'
mtcars$cyl <- droplevels(mtcars$cyl)

# Check the levels of 'cyl' after removing unused levels
levels(mtcars$cyl)
```

We apply droplevels() to mtcars\$cyl to remove any unused levels from the factor variable. This function removes factor levels that are not present in the data. In this case all three levels were present in the data and therefore nothing was removed.

cut(): The cut() function allows you to convert a continuous variable into a factor variable by dividing it into intervals or bins. This is useful when you want to group numeric data into categories or levels.

```{r}
# Create a new factor variable 'mpg_category' by cutting 'mpg' into intervals
mtcars$mpg_category <- cut(mtcars$mpg, 
                           breaks = c(0, 20, 30, Inf), 
                           labels = c("Low", "Medium", "High"))

# Summarize  the resulting 'mpg_category' variable
summary(mtcars$mpg_category)
```

In the provided code, a new factor variable called mpg_category is generated based on the mpg (miles per gallon) variable from the mtcars dataset. This is achieved using the cut() function, which segments the mpg values into distinct intervals and assigns appropriate factor labels.

The cut() function takes several arguments:

mtcars\$mpg represents the variable to be divided.

breaks specifies the cutoff points for interval creation. Here, we define three intervals: values up to 20, values between 20 and 30 (inclusive), and values greater than 30. The breaks argument is defined as c(0, 20, 30, Inf) to indicate these intervals.

`labels` assigns labels to the resulting factor levels. In this instance, the labels "Low", "Medium", and "High" are provided to correspond with the respective intervals.

Having demonstrated how to create the new colums `mpg_category`, we will now drop this column from the dataframe.

```{r}
# drop the column `mpg_category`
mtcars$mpg_category = NULL
```

## Logical operations

Here are some logical operations functions in R.

subset(): This function returns a subset of a data frame according to condition(s).

```{r}
# Find cars that have cyl = 4 and mpg < 28
subset(mtcars, cyl == 4 & mpg < 22)

# Find cars that have wt > 5 or mpg < 15
subset(mtcars, wt > 5 | mpg < 15)
```

which(): This function returns the indexes of a vector's members that satisfy a condition.

```{r}
# Find the indices of rows where mpg > 20
indices <- which(mtcars$mpg > 20)
indices
```

ifelse(): This function applies a logical condition to a vector and returns a new vector with values depending on whether the condition is TRUE or FALSE.

```{r}
# Create a new column "high_mpg" based on mpg > 20
mtcars$high_mpg <- ifelse(mtcars$mpg > 20, "Yes", "No")
```

Dropping a column: We can drop a column by setting it to NULL.

```{r}
# Drop the column "high_mpg"
mtcars$high_mpg <- NULL
```

all(): If every element in a vector satisfies a logical criterion, this function returns TRUE; otherwise, it returns FALSE.

```{r}
# Check if all values in mpg column are greater than 20
all(mtcars$mpg > 20)
```

any(): If at least one element in a vector satisfies a logical criterion, this function returns TRUE; otherwise, it returns FALSE.

```{r}
# Check if any of the values in the mpg column are greater than 20
any(mtcars$mpg > 20)
```

Subsetting based on a condition:

The logical expression \[\] and square bracket notation can be used to subset the mtcars dataset according to one or more conditions.

```{r}
# Subset mtcars based on mpg > 20
mtcars_subset <- mtcars[mtcars$mpg > 20, ]
mtcars_subset
```

sort(): This function arranges a vector in an increasing or decreasing sequence.

```{r}
sort(mtcars$mpg) # increasing order
sort(mtcars$mpg, decreasing = TRUE) # decreasing order
```

order(): This function provides an arrangement which sorts its initial argument into ascending or descending order.

```{r}
mtcars[order(mtcars$mpg), ] # ascending order
mtcars[order(-mtcars$mpg), ] # descending order
```

## Statistical functions

mean(): This function computes the arithmetic mean.

```{r}
mean(mtcars$mpg)
```

median(): This function computes the median.

```{r}
median(mtcars$mpg)
```

sd(): This function computes the standard deviation.

```{r}
sd(mtcars$mpg)
```

var(): This function computes the variance.

```{r}
var(mtcars$mpg)
```

cor(): This function computes the correlation between variables.

```{r}
cor(mtcars$mpg, mtcars$wt)
```

unique(): This function extracts the unique elements of a vector.

```{r}
unique(mtcars$mpg)
```

## Summarizing a dataframe

summary(): This function is a convenient tool to generate basic descriptive statistics for your dataset. It provides a succinct snapshot of the distribution characteristics of your data.

```{r}
summary(mtcars$mpg)
```

When applied to a vector or a specific column in a dataframe, it generates the following:

Min: This represents the smallest recorded value in the mpg column.

1st Qu: This indicates the first quartile or the 25th percentile of the mpg column. It implies that 25% of all mpg values fall below this threshold.

Median: This value signifies the median or the middle value of the mpg column, also known as the 50th percentile. Half of the mpg values are less than this value.

Mean: This denotes the average value of the mpg column.

3rd Qu: This represents the third quartile or the 75th percentile of the mpg column. It shows that 75% of all mpg values are less than this value.

Max: This indicates the highest value observed in the mpg column.

When we use summary(mtcars\$mpg), it returns these six statistics for the mpg (miles per gallon) column in the mtcars dataset.

When used with an entire dataframe, it applies to each column individually and provides a quick overview of the data.

```{r}
summary(mtcars$cyl)
```

The output of summary(mtcars\$cyl) displays the frequency distribution of the levels within the cyl factor variable. It shows the count or frequency of each level, which in this case are "4", "6", and "8". The summary will provide a concise overview of the distribution of these levels within the dataset.

```{r}
summary(mtcars)
```

## Creating new functions in R

We illustrate how to create a custom function in R that computes the mean of any given numeric column in the mtcars dataframe:

```{r}
# Function creation
compute_average <- function(df, column) {
  # Compute the average of the specified column
  average_val <- mean(df[[column]], na.rm = TRUE)
  
  # Return the computed average
  return(average_val)
}

# Utilize the created function
average_mpg <- compute_average(mtcars, "mpg")
print(average_mpg)

average_hp <- compute_average(mtcars, "hp")
print(average_hp)

```

In the above code, compute_average is a custom function which takes two arguments: a dataframe (df) and a column name (as a string) column. The function computes the mean of the specified column in the provided dataframe, with na.rm = TRUE ensuring that NA values (if any) are removed before the mean calculation.

After defining the function, we utilize it to calculate the average values of the "mpg" and "hp" columns in the mtcars dataframe. These computed averages are then printed.

This demonstrates a simple way to create a custom function in R.

Function to calculate average mileage for cars with a specific number of cylinders:

```{r}
avg_mileage_by_cyl <- function(data, cyl) {
  mean(data$mpg[data$cyl == cyl])
}

# Usage

# Returns the average mileage of cars with 4 cylinders
avg_mileage_by_cyl(mtcars, 4) 

# Returns the average mileage of cars with 6 cylinders
avg_mileage_by_cyl(mtcars, 6) 

```

## Summary of Chapter 5 -- Exploring Dataframes

Chapter 5 guides the reader through a comprehensive understanding of data manipulation, logical operations, statistical functions, and custom function creation in R. The chapter highlights a number of significant elements integral to any data analysis task in R.

Firstly, the chapter introduces an essential toolbox for data manipulation in R, focusing on 'dplyr'. It provides a step-by-step tutorial on using key 'dplyr' verbs such as select(), filter(), arrange(), mutate(), and summarise(). The lesson is further enriched with a discussion on the grouping data with the 'group_by()' function and the application of the pipe operator '%\>%', which provides a more readable and organized approach to data manipulation.

Secondly, the chapter explains logical operations in R, demonstrating how they can be employed in subsetting and data extraction tasks. It covers the workings of various functions including subset(), which(), ifelse(), all(), and any(). The chapter elaborates on data subsetting using square brackets and logical expressions, and introduces the sort() and order() functions, essential for arranging data in a particular sequence.

Thirdly, the chapter transitions into an examination of key statistical functions, showcasing the usage of mean(), median(), sd(), var(), and cor(). An interesting aspect is the inclusion of the unique() function, which allows extraction of distinct elements from a vector.

Fourthly, the chapter discusses the utility of the summary() function, providing basic descriptive statistics. This function furnishes a snapshot of dataset characteristics by generating the minimum, 1st quartile, median, mean, 3rd quartile, and maximum values for a specified dataset or column.

Lastly, the chapter unveils how to create and utilize custom functions in R. It provides an in-depth illustration of creating a custom function to calculate the mean of a given numeric column in a dataframe and the average mileage for cars with a specific number of cylinders. These examples highlight the extensibility of R and how custom functions can enhance its capabilities.

In summary, Chapter 5 serves as a comprehensive guide to effectively managing, manipulating, and analyzing data in R. Through the demonstration of custom functions, it underscores how R's functionalities can be extended according to the specific needs of a task, thus, strengthening the flexibility and power of R programming.
