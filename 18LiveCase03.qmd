# Live Case: S&P500 (3 of 3)

*July 30, 2023 -=- This chapter is being heavily edited; It is very much Work in Progress*

## S&P 500.

We will continue our analysis of the S&P 500,

## S&P 500 Data - Preliminary Analysis

Recall that we are analyzing a real-world, recent dataset containing information about the S&P500 stocks. The dataset is located in a <a href="https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/edit#gid=0" target="_blank">Google Sheet</a>

1.  The complete URL is\
    <a href="https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/edit#gid=0" target="_blank">https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/</a>

2.  The Google Sheet ID is: `11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM`.

```{r, warning=FALSE}
# Read S&P500 stock data present in a Google Sheet.
library(gsheet)
prefix <- "https://docs.google.com/spreadsheets/d/"
sheetID <- "11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM"
url500 <- paste(prefix,sheetID) # Form the URL to connect to
sp500 <- gsheet2tbl(url500) # Read it into a tibble called sp500
```

2.  We will rename the data columns to make it easier to work with the data, using the `rename_with()` function.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
suppressPackageStartupMessages(library(dplyr))
```

```{r, warning=FALSE}
# Define a mapping of new column names
new_names <- c(
  "Date", "Stock", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "Rating"
)
# Rename the columns using the new_names vector
sp500 <- sp500 %>% 
  rename_with(~ new_names, everything())

```

### Review the data again after renaming columns

1.  We review the column names again after renaming them, using the `colnames()` function can help.

```{r, warning=FALSE}
colnames(sp500)
```

### Understand the Data Columns

1.  The complete data has 36 columns. Our goal is to gain a deeper understanding of what the data columns mean.

2.  We reorganize the column names into eight tables, labeled Table 1a, 1b.. 1h.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
library(tibble)
new_names <- c(
  "Date", "Stock", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "Rating"
)
descriptions <- c(
  "Date (e.g. \"7/15/2023\")",
  "Stock Ticker (e.g. AAL)",
  "Name of the company (e.g \"American Airlines Group, Inc.\")",
  "Sector the stock belongs to (e.g. \"Transportation\")",
  "Industry the stock belongs to (e.g \"Airlines\")",
  "Market capitalization of the company",
  "Recent Stock Price",
  "52-Week Low Price",
  "52-Week High Price",
  "Return on Equity",
  "Return on Assets",
  "Return on Invested Capital",
  "Gross Profit Margin",
  "Operating Profit Margin",
  "Net Profit Margin",
  "Price-to-Earnings Ratio",
  "Price-to-Book Ratio",
  "Enterprise Value to EBITDA Ratio",
  "EBITDA",
  "Earnings per Share",
  "EBITDA Year-over-Year Growth",
  "EBITDA Quarterly Year-over-Year Growth",
  "EPS Year-over-Year Growth",
  "EPS Quarterly Year-over-Year Growth",
  "Price-to-Free Cash Flow",
  "Free Cash Flow",
  "Free Cash Flow Quarterly Year-over-Year Growth",
  "Debt-to-Equity Ratio",
  "Current Ratio",
  "Quick Ratio",
  "Dividend Yield",
  "Annual Dividends per Share Year-over-Year Growth",
  "Price-to-Sales Ratio",
  "Revenue Year-over-Year Growth",
  "Revenue Quarterly Year-over-Year Growth",
  "Technical Rating"
)
column_info <- tibble(ColumnName = new_names, Description = descriptions)
```

### Remove Rows containing no data or Null values

1.  The following code checks if the "Stock" column in the sp500 dataframe contains any null or blank values. If there are null or blank values present, it removes the corresponding rows from the sp500 dataframe, resulting in a filtered dataframe without null or blank values in the "Stock" column.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
# Check for blank or null values in the "Stock" column
hasNull <- any(sp500$Stock == "" | is.null(sp500$Stock))
if (hasNull) { 
    # Remove rows with null or blank values from the dataframe tibble
    sp500 <- sp500[!(is.null(sp500$Stock) | sp500$Stock == ""), ]
}
```

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
# View the filtered dataframe
nrow(sp500)
```

Thus, we have nrow(sp500) stocks of the S&P500 in our dataset.

5.  The S&P500 shares are divided into multiple Sectors. Each stock belongs to a unique sector. Thus, it makes sense to model Sector as a factor() variable.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sp500$Sector <- as.factor(sp500$Sector)
```

6.  We can use the levels() function to review the different levels it can take.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
levels(sp500$Sector)
```

The table() function allows us to count how many stocks are part of each sector.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
table(sp500$Sector)
```

Thus, we can see how many stocks are part of each one of the 19 sectors.

We can sum them to confirm that they add up to 502.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sum(table(sp500$Sector))
```

7.  Stock Ratings: In the data, the S&P500 shares have Technical Ratings such as {Buy, Sell, ..}. Since each Stock has a unique Technical Rating, it makes sense to model the data column Rating as a factor() variable.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sp500$Rating <- as.factor(sp500$Rating)
```

We can use the levels() function to review the different levels it can take.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
levels(sp500$Rating)
```

The table() function allows us to count how many stocks have each Rating.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
table(sp500$Rating)
```

Thus, we can see how many stocks have ratings ranging from "Strong Sell" to "Strong Buy". This completes our review of Technical Rating.

### Filter the data by sector Technology Services, and display the number of stocks in the sector

```{r warning=FALSE, eval=TRUE, echo=TRUE}
ts <- sp500 %>%
		filter(Sector=='Technology Services')

nrow(ts)
```

There are 50 number of of stocks in the sector Technology Services

### Select the Specific Coulumns from the filtered dataframe `ts` (Technology Services)

```{r warning=FALSE, eval=TRUE, echo=TRUE}
ts2 <- ts %>%
		select(Date, Stock, StockName,Sector,  Industry, MarketCap, Price,Low52Wk, High52Wk,
		       ROE, ROA,ROIC,GrossMargin, GrossMargin, 
		       NetMargin, Rating)

colnames(ts2)
```

### Arrange the Dataframe by ROE

```{r warning=FALSE, eval=TRUE, echo=TRUE}
ts3 <- ts2 %>% arrange(desc(ROE))
```

### Top 10 Shares in Sector Technology Services Based on ROE

```{r warning=FALSE, eval=TRUE, echo=TRUE}
head(ts3,10)
```

### Mutate a data column called (Low52WkPerc), then show top 10 ROE stocks

```{r  warning=FALSE, eval=TRUE, echo=TRUE}
ts4 <- ts3 %>% mutate(Low52WkPerc = round((Price - Low52Wk)*100 / Low52Wk,2))
head(ts4[,c(1:3,10,16)],10)
```
