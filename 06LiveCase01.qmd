# Live Case: S&P500 (1 of 3)

*Aug 02, 2023*

## S&P 500

The S&P 500, also called the Standard & Poor's 500, is a stock market index that tracks the performance of 500 major publicly traded companies listed on U.S. stock exchanges. It serves as a widely accepted benchmark for assessing the overall health and performance of the U.S. stock market.

S&P Dow Jones Indices, a division of S&P Global, is responsible for maintaining the index. The selection of companies included in the S&P 500 is determined by a committee, considering factors such as market capitalization, liquidity, and industry representation.

The S&P is a float-weighted index, meaning the market capitalizations of the companies in the index are adjusted by the number of shares available for public trading. https://www.investopedia.com/terms/s/sp500.asp

The performance of the S&P 500 is frequently used to gauge the broader stock market and is commonly referenced by investors, analysts, and financial media. It provides a snapshot of how large-cap U.S. stocks are faring and is considered a reliable indicator of overall market sentiment.

Typically, the S&P 500 index consists of 500 stocks. However, in reality, there are actually 503 stocks included. This discrepancy arises because three of the listed companies have multiple share classes, and each class is considered a separate stock that needs to be included in the index.

Among these 503 stocks, Apple, the technology giant, holds the top position with a market capitalization of \$2.35 billion. Following Apple, Microsoft and Amazon.com rank as the second and third largest stocks in the S&P 500, respectively. The next positions are held by Nvidia Corp, Tesla, Berkshire Hathaway, and two classes of shares from Google's parent company, Alphabet..





## S&P 500 Data - Preliminary Analysis

We will analyze a real-world, recent dataset containing information about the S&P500 stocks. The dataset is located in a <a href="https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/edit#gid=0" target="_blank">Google Sheet</a>

The data is disorganized and challenging to understand. We will review the data and proceed in a step-by-step manner.

### Read the S&P500 data from a Google Sheet into a tibble dataframe.

1.  The complete URL is\
    <a href="https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/edit#gid=0" target="_blank">https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/</a>

2.  The Google Sheet ID is: `11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM`. We can use the function `gsheet2tbl` in package `gsheet` to read the Google Sheet into a tibble or dataframe, as demonstrated in the following code.

```{r, warning=FALSE}
# Read S&P500 stock data present in a Google Sheet.
library(gsheet)
prefix <- "https://docs.google.com/spreadsheets/d/"
sheetID <- "11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM"
url500 <- paste(prefix,sheetID) # Form the URL to connect to
sp500 <- gsheet2tbl(url500) # Read it into a tibble called sp500
```

## Review the data

1.  We want to understand the different data columns and their data structure. For this purpose, we run the `str()` function.

```{r, warning=FALSE}
str(sp500)
```

2.  The `str(sp500)` output provides valuable insights into the structure and data types of the columns in the `sp500` tibble. Let's delve into the details.

3.  The output reveals that `sp500` is a tibble with dimensions \[503 Ã— 36\]. This means it consists of 503 rows, each representing a specific S&P500 stock, and 36 columns containing information about each stock.

4.  Here is a preliminary breakdown of the information associated with each column:

-   The columns labeled `Date`, `Stock`, `Description`, `Sector`, and `Industry` are character columns. They respectively represent the date, stock ticker symbol, description, sector, and industry of each S&P500 stock.

-   Columns such as `Market.Capitalization`, `Price`, `X52.Week.Low`, `X52.Week.High`, and other numeric columns contain diverse financial metrics and stock prices related to the S&P500 stocks.

-   The column labeled `Technical.Rating` is a character column that assigns a technical rating to each stock.

5.  By examining the `str(sp500)` output, we gain a preliminary understanding of the data types and column names present in the `sp500` tibble, enabling us to grasp the structure of the dataset.

### Rename Data Columns

1.  The names of the data columns are lengthy and confusing.

2.  We will rename the data columns to make it easier to work with the data, using the `rename_with()` function.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
suppressPackageStartupMessages(library(dplyr))
```

```{r, warning=FALSE}
# Define a mapping of new column names
new_names <- c(
  "Date", "Stock", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "Rating"
)
# Rename the columns using the new_names vector
sp500 <- sp500 %>% 
  rename_with(~ new_names, everything())

```

This code is designed to rename the columns of the `sp500` tibble using a predefined mapping of new column names. Let's go through the code step by step:

1.  A vector named `new_names` is created, which contains the desired new names for each column in the `sp500` tibble. Each element in the `new_names` vector corresponds to a specific column in the `sp500` tibble and represents the desired new name for that column.

2.  The `%>%` operator, often referred to as the pipe operator, is used to pass the `sp500` tibble to the subsequent operation in a more readable and concise manner.

3.  The `rename_with()` function from the `dplyr` package is applied to the `sp500` tibble. This function allows us to rename columns based on a specified function or formula.

4.  In this case, a formula `~ new_names` is used as the first argument of `rename_with()`. This formula indicates that the new names for the columns should be sourced from the `new_names` vector.

5.  The second argument, `everything()`, specifies that the renaming should be applied to all columns in the `sp500` tibble.

6.  Finally, the resulting tibble with the renamed columns is assigned back to the `sp500` variable, effectively updating the tibble with the new column names.

7.  We could also use the following code to rename the columns.

```{r, warning=FALSE, eval=FALSE, echo=TRUE}
# Rename the columns using the new_names vector
colnames(sp500) <- new_names
```

In essence, the code uses the `new_names` vector as a mapping to assign new column names to the `sp500` tibble, ensuring that each column is given the desired new name specified in `new_names`.

### Review the data again after renaming columns

1.  We review the column names again after renaming them, using the `colnames()` function can help.

```{r, warning=FALSE}
colnames(sp500)
```

### Understand the Data Columns

1.  The complete data has 36 columns. Our goal is to gain a deeper understanding of what the data columns mean.

2.  We reorganize the column names into eight tables, labeled Table 1a, 1b.. 1h.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
library(tibble)
new_names <- c(
  "Date", "Stock", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "Rating"
)
descriptions <- c(
  "Date (e.g. \"7/15/2023\")",
  "Stock Ticker (e.g. AAL)",
  "Name of the company (e.g \"American Airlines Group, Inc.\")",
  "Sector the stock belongs to (e.g. \"Transportation\")",
  "Industry the stock belongs to (e.g \"Airlines\")",
  "Market capitalization of the company",
  "Recent Stock Price",
  "52-Week Low Price",
  "52-Week High Price",
  "Return on Equity",
  "Return on Assets",
  "Return on Invested Capital",
  "Gross Profit Margin",
  "Operating Profit Margin",
  "Net Profit Margin",
  "Price-to-Earnings Ratio",
  "Price-to-Book Ratio",
  "Enterprise Value to EBITDA Ratio",
  "EBITDA",
  "Earnings per Share",
  "EBITDA Year-over-Year Growth",
  "EBITDA Quarterly Year-over-Year Growth",
  "EPS Year-over-Year Growth",
  "EPS Quarterly Year-over-Year Growth",
  "Price-to-Free Cash Flow",
  "Free Cash Flow",
  "Free Cash Flow Quarterly Year-over-Year Growth",
  "Debt-to-Equity Ratio",
  "Current Ratio",
  "Quick Ratio",
  "Dividend Yield",
  "Annual Dividends per Share Year-over-Year Growth",
  "Price-to-Sales Ratio",
  "Revenue Year-over-Year Growth",
  "Revenue Quarterly Year-over-Year Growth",
  "Technical Rating"
)
column_info <- tibble(ColumnName = new_names, Description = descriptions)
```

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
# Create different Tables explaining different columns in the data
library(dplyr)
stockCols = slice(column_info, c(1:7))
taCols = slice(column_info, c(8,9,36))
profitabilityCols = slice(column_info, c(10:15))
earningsCols = slice(column_info, c(16:24))
fcfCols = slice(column_info, c(25:27))
liquidityCols = slice(column_info, c(28:30))
dividendCols = slice(column_info, c(31:32))
revenueCols = slice(column_info, c(33:35))
```

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
suppressPackageStartupMessages(library(kableExtra))
table1a <- knitr::kable(stockCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1a: Data Columns giving basic Company Information" = ncol(column_info)))
table1b <- knitr::kable(taCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1b: Data Columns related to Pricing and Technical Analysis" = ncol(column_info)))
table1c <- knitr::kable(profitabilityCols, "html") %>% kable_styling() %>% add_header_above(c("Table 1c: Data Columns related to Profitability" = ncol(column_info)))
table1d <- knitr::kable(earningsCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1d: Data Columns related to Earnings" = ncol(column_info)))
table1e <- knitr::kable(fcfCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1e: Data Columns related to Free Cash Flow" = ncol(column_info)))
table1f <- knitr::kable(liquidityCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1f: Data Columns related to Liquidiy" = ncol(column_info)))
table1g <- knitr::kable(revenueCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1g: Data Columns related to Revenue" = ncol(column_info)))
table1h <- knitr::kable(dividendCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1h: Data Columns related to Dividends" = ncol(column_info)))
```

a.  The column names described in Table 1a. concern basic **Company Information** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1a 
```

b.  The column names described in Table 1b. are related to **Technical Analysis** of each stock, including the 52-Week High and Low prices.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1b
```

c.  The column names described in Table 1c. are related to the **Profitability** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1c
```

The column names described in Table 1d are related to the **Earnings** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1d
```

The column names described in Table 1e are related to the **Free Cash Flow** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1e
```

The column names described in Table 1f concern the **Liquidity** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1f
```

The column names described in Table 1g are related to the **Revenue** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1g
```

The column names described in Table 1h are related to the **Dividends** of each stock.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1h
```

### Remove Rows containing no data or Null values

1.  The following code checks if the "Stock" column in the sp500 dataframe contains any null or blank values. If there are null or blank values present, it removes the corresponding rows from the sp500 dataframe, resulting in a filtered dataframe without null or blank values in the "Stock" column.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
# Check for blank or null values in the "Stock" column
hasNull <- any(sp500$Stock == "" | is.null(sp500$Stock))
if (hasNull) { 
    # Remove rows with null or blank values from the dataframe tibble
    sp500 <- sp500[!(is.null(sp500$Stock) | sp500$Stock == ""), ]
}
```

Here's an alternate code using `dplyr` to achieve the same result:

```{r, warning=FALSE, eval=FALSE, echo=TRUE}
library(dplyr)
# Check for blank or null values in the "Stock" column
hasNull <- any(sp500 %>% pull(Stock) == "" | is.null(sp500 %>% pull(Stock)))
if (hasNull) { 
  # Remove rows with null or blank values from the dataframe tibble
  sp500 <- sp500 %>% filter(!(is.null(Stock) | Stock == ""))
}
```

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
# View the filtered dataframe
nrow(sp500)
```

Thus, we have 502 stocks of the S&P500 in our dataset.

### S&P500 Sector

The S&P500 shares are divided into multiple Sectors. Each stock belongs to a unique sector. Thus, it makes sense to model Sector as a factor() variable.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sp500$Sector <- as.factor(sp500$Sector)
```

It makes sense to convert Sector to a factor variable, since there are 19 distinct Sectors in the S&P500 and each stock belongs to a unique sector. We confirm that Sector is now modelled as a factor variable, by running the str() function.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
str(sp500$Sector)
```

Now that Sectors is a factor variable, we can use the levels() function to review the different levels it can take.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
levels(sp500$Sector)
```

The table() function allows us to count how many stocks are part of each sector.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
table(sp500$Sector)
```

Thus, we can see how many stocks are part of each one of the 19 sectors.

We can sum them to confirm that they add up to 502.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sum(table(sp500$Sector))
```

This completes our review of the Sector variable.

### Stock Ratings

In the data, the S&P500 shares have Technical Ratings such as {Buy, Sell, ..}. Since each Stock has a unique Technical Rating, it makes sense to model the data column Rating as a factor() variable.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
sp500$Rating <- as.factor(sp500$Rating)
```

We confirm that Rating is now modelled as a factor variable, by running the str() function.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
str(sp500$Rating)
```

We can use the levels() function to review the different levels it can take.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
levels(sp500$Rating)
```

The table() function allows us to count how many stocks have each Rating.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
table(sp500$Rating)
```

Thus, we can see how many stocks have ratings ranging from "Strong Sell" to "Strong Buy". This completes our review of Technical Rating.

### Where are we now?

We believe this dataset of S&P500 shares is now ready for futher analysis. We end this stage of our analysis in this chapter, by running the str() function to review the data columns.

```{r, warning=FALSE, eval=TRUE, echo=TRUE}
str(sp500)
```

## Summary of Chapter 6 -- Exploring S&P500 Data

Chapter 6 embarks on an exploration of the S&P500, a significant stock market index encompassing 500 major publicly traded companies in the U.S. The chapter introduces the index's role as a benchmark for assessing the overall health and performance of the U.S. stock market, maintained by S&P Dow Jones Indices.

Part 1 of the chapter delves into a real-world dataset containing information about S&P500 stocks. The data is loaded into a tibble using the R package `gsheet`, and its structure is examined using the `str()` function. To facilitate data management, column names are renamed using the `rename_with()` function from `dplyr`, and a detailed breakdown of column information is presented across eight tables.

Part 2 addresses data quality, ensuring a cleaner dataset by removing rows with null or blank values in the "Stock" column. Additionally, the "Sector" and "Rating" columns are transformed into factor variables, reflecting the distinct sectors and technical ratings each stock holds. The distribution of sectors and ratings is analyzed using various functions. After data preparation, the dataset is considered ready for further analysis.

Chapter 6 skillfully guides readers through the intricacies of exploring S&P500 data, employing practical examples and R code to foster a deeper understanding of the dataset's structure and content. Further exploration is encouraged with a wealth of references for continued learning and analysis.
